# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {../include/fl_anna_display.h} 
code_name {../gui/fl_anna_display.cxx}
decl {\#include <math.h>} {public local
} 

decl {\#include <msmvtl/tmatrix.h>} {public local
} 

decl {\#include <fl_cartesian.h>} {public local
} 

class fl_anna_display {open
} {
  decl {TVector<unsigned int> _net_str;} {public local
  }
  Function {fl_anna_display()} {open
  } {
    Fl_Window str {
      label {ANNA Structure} open
      xywh {371 186 500 565} type Double labelfont 8 labelsize 12 align 0 resizable modal visible
    } {
      Fl_Group {} {open
        xywh {-13 -1 745 581}
      } {
        Fl_Box {} {
          xywh {4 9 490 532} box ENGRAVED_BOX color 0
        }
        Fl_Box {} {
          xywh {17 49 115 472} box FLAT_BOX color 27
        }
        Fl_Box {} {
          xywh {137 49 218 472} box FLAT_BOX color 8
        }
        Fl_Box {} {
          xywh {360 49 122 472} box FLAT_BOX color 24
        }
        Fl_Box graph_str {
          xywh {2 5 525 540} color 0 selection_color 0 labelfont 8 labelsize 12
          class Ca_Canvas
        }
        Fl_Box pos_y {
          xywh {-6 -1 3 576}
          class Ca_Y_Axis
        }
        Fl_Box pos_x {
          xywh {-13 580 745 0}
          class Ca_X_Axis
        }
        Fl_Box {} {
          label {Input layer}
          xywh {34 17 66 25} labelsize 12 labelcolor 3
        }
        Fl_Box {} {
          label {Hidden layer(s)}
          xywh {204 17 84 25} labelsize 12 labelcolor 3
        }
        Fl_Box {} {
          label {Output layer}
          xywh {384 17 72 25} labelsize 12 labelcolor 3
        }
      }
      Fl_Button {} {
        label {&Close}
        callback {str->hide();}
        xywh {429 542 62 22}
      }
    }
    code {int numitem, i;
    // Lee el numero de items en el FIS y lo guarda en numitem
    numitem = 3;
    int d= 495/(numitem+1);
    for(i=0; i<numitem; i++)
    {
      { Fl_Box* o = new Fl_Box(40, 30+d*(i+1), 60, 25, "Input");
        o->labelfont(8);
        o->labelsize(12);
        o->labelcolor(3);
      }
    }
    { Fl_Box* o = new Fl_Box(440, 400, 60, 25, "Output");
      o->labelfont(8);
      o->labelsize(12);
      o->labelcolor(3);
    }} {}
  }
  Function {show()} {open
  } {
    code {str->position(6,411);
  str->show();
  draw();} {}
  }
  Function {draw()} {open
  } {
    code {//
  int i, j, jj;
  float posy, posx, posy2, posx2, ystep, xstep;
  static Ca_LinePoint * L=0;
  Ca_Canvas::current(graph_str);
  graph_str->clear();
  int max= _net_str.get_max();
  int ly=_net_str.size();
  //int nl[]={2,4,5,1};
  real w_x=9, w_y=10, _offset, _offset2;
  ystep = w_y/(float)(max+1);
  xstep = w_x/(float)(ly+2);

  pos_y->min_val(-0.1);
  pos_y->max_val(10.8);
  pos_x->min_val(0);
  pos_x->max_val(9);
  pos_y->current();  
  
  // Intputs
  _offset=real(max-(int)_net_str[0])/2.0;
  posx = xstep*(0.4);
  posx2 = xstep*(1.2);
  for(j=1; j<=(int)_net_str[0]; j++){
    posy = ystep*(j+_offset+0.2);
    L=NULL;
    L=new Ca_LinePoint(L,posx,posy,FL_RED);
    L=new Ca_LinePoint(L,posx2,posy,FL_RED);
    new Ca_Point(posx,posy,FL_CYAN,FL_MAGENTA,ROUND|BORDER,6); 
  }
  // Outputs
  _offset2=real(max-(int)_net_str[ly-1])/2.0;
  for(j=1; j<=(int)_net_str[_net_str.size()-1]; j++){
    posy = ystep*(j+_offset2+0.2);
    posx = xstep*(ly+0.2);
    posx2 = xstep*(ly+1.2);
    L=NULL;
    L=new Ca_LinePoint(L,posx,posy,FL_BLUE);
    L=new Ca_LinePoint(L,posx2,posy,FL_RED);
    new Ca_Point(posx2,posy,FL_CYAN,FL_MAGENTA,ROUND|BORDER,6); 
  }
  // Neurons
  for(i=0; i<ly; i++){
    _offset=real(max-(int)_net_str[i])/2.0;
    posx = xstep*(i+1.2);
    posx2 = xstep*(i+2.2);
    for(j=1; j<=(int)_net_str[i]; j++){
      posy = ystep*(j+_offset+0.2);
      if(i<ly-1){
        _offset2=real(max-(int)_net_str[i+1])/2.0;
        for(jj=1; jj<=(int)_net_str[i+1]; jj++){
          posy2 = ystep*(jj+_offset2+0.2);
          L=NULL;
          L=new Ca_LinePoint(L,posx,posy,FL_BLUE);
          L=new Ca_LinePoint(L,posx2,posy2,FL_BLUE);
        }
      }
      new Ca_Point(posx,posy,FL_YELLOW,FL_CYAN,ROUND|BORDER,6); 
    }
  }} {selected
    }
  }
  Function {setstruc(unsigned int _i, TVector<unsigned int>& _str, unsigned int _o)} {open
  } {
    code {_net_str.push_back(_i);
_net_str.push_back(_str);
_net_str.push_back(_o);} {}
  }
  Function {hide()} {open
  } {
    code {str->hide();} {}
  }
} 
