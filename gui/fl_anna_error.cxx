// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "../include/fl_anna_error.h"

void fl_anna_error::cb_close_i(Fl_Button*, void*) {
  werror->hide();
  //this->hide();
}
void fl_anna_error::cb_close(Fl_Button* o, void* v) {
  ((fl_anna_error*)(o->parent()->user_data()))->cb_close_i(o,v);
}

fl_anna_error::fl_anna_error() {
  { werror = new Fl_Double_Window(600, 315, "ANNA - Training Error Display");
    werror->color((Fl_Color)180);
    werror->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(9, 8, 583, 275);
      o->box(FL_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelfont(8);
      o->labelsize(12);
    } // Fl_Box* o
    { graph = new Ca_Canvas(67, 33, 481, 199);
      graph->box(FL_FLAT_BOX);
      graph->color(FL_FOREGROUND_COLOR);
      graph->selection_color(FL_FOREGROUND_COLOR);
      graph->labeltype(FL_NORMAL_LABEL);
      graph->labelfont(8);
      graph->labelsize(12);
      graph->labelcolor(FL_FOREGROUND_COLOR);
      graph->align(Fl_Align(FL_ALIGN_TOP));
      graph->when(FL_WHEN_RELEASE);
      graph->current();
    } // Ca_Canvas* graph
    { error = new Ca_Y_Axis(23, 25, 45, 215, "ERROR");
      error->box(FL_FLAT_BOX);
      error->color(FL_FOREGROUND_COLOR);
      error->selection_color(FL_BACKGROUND2_COLOR);
      error->labeltype(FL_NORMAL_LABEL);
      error->labelfont(8);
      error->labelsize(12);
      error->labelcolor(FL_BACKGROUND2_COLOR);
      error->align(Fl_Align(FL_ALIGN_TOP));
      error->when(FL_WHEN_RELEASE);
    } // Ca_Y_Axis* error
    { epoch = new Ca_X_Axis(60, 232, 530, 32, "ITERATIONS");
      epoch->box(FL_FLAT_BOX);
      epoch->color(FL_FOREGROUND_COLOR);
      epoch->selection_color(FL_BACKGROUND_COLOR);
      epoch->labeltype(FL_NORMAL_LABEL);
      epoch->labelfont(8);
      epoch->labelsize(12);
      epoch->labelcolor(FL_BACKGROUND2_COLOR);
      epoch->align(Fl_Align(FL_ALIGN_BOTTOM));
      epoch->when(FL_WHEN_RELEASE);
    } // Ca_X_Axis* epoch
    { _error = new Fl_Value_Output(50, 288, 149, 20, "error:");
      _error->box(FL_THIN_DOWN_BOX);
    } // Fl_Value_Output* _error
    { _prog = new Fl_Progress(214, 288, 265, 20);
      _prog->box(FL_THIN_DOWN_BOX);
    } // Fl_Progress* _prog
    { close = new Fl_Button(495, 288, 94, 20, "&Close");
      close->box(FL_PLASTIC_UP_BOX);
      close->color((Fl_Color)81);
      close->labelfont(8);
      close->labelsize(12);
      close->callback((Fl_Callback*)cb_close);
    } // Fl_Button* close
    werror->end();
  } // Fl_Double_Window* werror
  //
    counter = 0;
    GP = 0;
}

void fl_anna_error::show() {
  //
    werror->show();
    esetxaxis();
    esetyaxis();
}

void fl_anna_error::esetxaxis() {
  //
    epoch->min_val(0.0);
    epoch->max_val(0.0);
    epoch->label_format("%g");
    epoch->minor_grid_color(fl_gray_ramp(5));
    epoch->major_grid_color(fl_gray_ramp(10));
    epoch->label_grid_color(fl_gray_ramp(10));
    epoch->grid_visible(CA_MINOR_GRID|CA_MAJOR_GRID|CA_LABEL_GRID);
    epoch->major_step(10);
    epoch->label_step(10);
    epoch->label_size(10);
    epoch->axis_color(FL_WHITE);
}

void fl_anna_error::esetyaxis() {
  //
    error->min_val(-0.01);
    error->max_val(0.0);
    error->label_format("%g");
    error->minor_grid_color(fl_gray_ramp(5));
    error->major_grid_color(fl_gray_ramp(10));
    error->label_grid_color(fl_gray_ramp(10));
    error->grid_visible(CA_MINOR_GRID|CA_MAJOR_GRID|CA_LABEL_GRID);
    error->major_step(0.1);
    error->label_step(0.1);
    error->label_size(10);
    error->axis_color(FL_WHITE);
}

void fl_anna_error::grapherror(real err) {
  //
    Ca_Canvas::current(graph);
    //graph->current();
    //error->current();
    last_error(err);
    error->rescale(CA_WHEN_MAX, err*1.1);
    GP = new Ca_LinePoint(GP, counter, err, FL_CYAN);
    counter++;
    _prog->value(counter);
    Fl::flush();
}

void fl_anna_error::last_error(real r) {
  //
    _error->value(r);
}

void fl_anna_error::num_epochs(real r) {
  //
    epoch->max_val(r);
    _prog->minimum(0);
    _prog->maximum(r);
}
