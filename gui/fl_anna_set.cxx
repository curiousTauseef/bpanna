// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "../include/fl_anna_set.h"

void fl_anna_set::cb_Cancel_i(Fl_Button*, void*) {
  hide();
}
void fl_anna_set::cb_Cancel(Fl_Button* o, void* v) {
  ((fl_anna_set*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void fl_anna_set::cb_Display_i(Fl_Button*, void*) {
  //
  unsigned int _o = _out;
  fl_anna_display * _ns = new fl_anna_display();
  
  _nstr.resize((int)_nl->value());

  if((int)_nl->value()>0)
    _nstr[0]=(unsigned int)(_ly_1->value());
  if((int)_nl->value()>1)
    _nstr[1]=(unsigned int)(_ly_2->value());
  if((int)_nl->value()>2)
    _nstr[2]=(unsigned int)(_ly_3->value());
  //_nstr.push_back(1);

  _ns->setstruc(_in, _nstr, _o);
  _ns->show();
}
void fl_anna_set::cb_Display(Fl_Button* o, void* v) {
  ((fl_anna_set*)(o->parent()->user_data()))->cb_Display_i(o,v);
}

void fl_anna_set::cb_Apply_i(Fl_Button*, void*) {
  //
  _nstr.resize((int)_nl->value());
  _n_actf.resize((int)_nl->value());

  
  if((int)_nl->value()>0){
    _nstr[0]=(unsigned int)(_ly_1->value());
    _n_actf[0]=(unsigned int)(choice_activation_function_1->value());
  }
  
  if((int)_nl->value()>1){
    _nstr[1]=(unsigned int)(_ly_2->value());
    _n_actf[1]=(unsigned int)(choice_activation_function_2->value());
  }
  
  if((int)_nl->value()>2){
    _nstr[2]=(unsigned int)(_ly_3->value());
    _n_actf[2]=(unsigned int)(choice_activation_function_3->value());
  }
  //_nstr.push_back(1);
  hide();
}
void fl_anna_set::cb_Apply(Fl_Button* o, void* v) {
  ((fl_anna_set*)(o->parent()->user_data()))->cb_Apply_i(o,v);
}

void fl_anna_set::cb__nl_i(Fl_Spinner*, void*) {
  //
  chk_layers();
}
void fl_anna_set::cb__nl(Fl_Spinner* o, void* v) {
  ((fl_anna_set*)(o->parent()->user_data()))->cb__nl_i(o,v);
}

void fl_anna_set::cb_nop_i(Fl_Spinner*, void*) {
  //
  //cntr->deactivate();
}
void fl_anna_set::cb_nop(Fl_Spinner* o, void* v) {
  ((fl_anna_set*)(o->parent()->user_data()))->cb_nop_i(o,v);
}

fl_anna_set::~fl_anna_set() {
}

fl_anna_set::fl_anna_set() {
  { track = new Fl_Double_Window(365, 215, "Structure Editor");
    track->color(FL_LIGHT2);
    track->labelfont(8);
    track->labelsize(12);
    track->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(15, 35, 330, 130);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)188);
      { Fl_Box* o = new Fl_Box(35, 58, 285, 96, "            neurons   function");
        o->box(FL_THIN_DOWN_BOX);
        o->color((Fl_Color)19);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Box* o
      { _ly_1 = new Fl_Value_Input(100, 71, 45, 22, "Layer 1:");
        _ly_1->labelsize(12);
        _ly_1->minimum(1);
        _ly_1->maximum(10);
        _ly_1->step(1);
        _ly_1->value(2);
        _ly_1->textsize(12);
      } // Fl_Value_Input* _ly_1
      { _ly_2 = new Fl_Value_Input(100, 97, 45, 22, "Layer 2:");
        _ly_2->labelsize(12);
        _ly_2->minimum(1);
        _ly_2->maximum(10);
        _ly_2->step(1);
        _ly_2->value(3);
        _ly_2->textsize(12);
      } // Fl_Value_Input* _ly_2
      { _ly_3 = new Fl_Value_Input(100, 124, 45, 22, "Layer 3:");
        _ly_3->labelsize(12);
        _ly_3->minimum(1);
        _ly_3->maximum(10);
        _ly_3->step(1);
        _ly_3->value(1);
        _ly_3->textsize(12);
      } // Fl_Value_Input* _ly_3
      { Fl_Choice* o = choice_activation_function_1 = new Fl_Choice(155, 71, 160, 22);
        choice_activation_function_1->down_box(FL_BORDER_BOX);
        choice_activation_function_1->labelsize(12);
        choice_activation_function_1->textsize(12);
        o->add("Sigmoid"); o->add("Tan-Sigmoid");
        o->value(0);
      } // Fl_Choice* choice_activation_function_1
      { Fl_Choice* o = choice_activation_function_2 = new Fl_Choice(155, 97, 160, 22);
        choice_activation_function_2->down_box(FL_BORDER_BOX);
        choice_activation_function_2->labelsize(12);
        choice_activation_function_2->textsize(12);
        o->add("Sigmoid"); o->add("Tan-Sigmoid");
        o->value(0);
      } // Fl_Choice* choice_activation_function_2
      { Fl_Choice* o = choice_activation_function_3 = new Fl_Choice(155, 124, 160, 22);
        choice_activation_function_3->down_box(FL_BORDER_BOX);
        choice_activation_function_3->labelsize(12);
        choice_activation_function_3->textsize(12);
        o->add("Sigmoid"); o->add("Tan-Sigmoid");
        o->value(0);
      } // Fl_Choice* choice_activation_function_3
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(80, 180, 87, 25, "&Cancel");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)113);
      o->callback((Fl_Callback*)cb_Cancel);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(170, 180, 87, 25, "&Display");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)113);
      o->callback((Fl_Callback*)cb_Display);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(260, 180, 87, 25, "&Apply");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)113);
      o->callback((Fl_Callback*)cb_Apply);
    } // Fl_Button* o
    { _nl = new Fl_Spinner(140, 10, 39, 20, "Number of layers:");
      _nl->labelfont(1);
      _nl->labelsize(12);
      _nl->maximum(3);
      _nl->value(2);
      _nl->callback((Fl_Callback*)cb__nl);
    } // Fl_Spinner* _nl
    { nop = new Fl_Spinner(305, 10, 39, 20, "Outputs:");
      nop->labelfont(1);
      nop->labelsize(12);
      nop->callback((Fl_Callback*)cb_nop);
    } // Fl_Spinner* nop
    track->set_non_modal();
    track->end();
  } // Fl_Double_Window* track
  //
    chk_layers();
}

void fl_anna_set::show(unsigned int _inp, unsigned int _op) {
  //
    _out = _op;
    _in = _inp;
    
    track->show();
}

void fl_anna_set::structure(TVector<unsigned int>& s) {
  //
    _nstr = s;
    _num_ly = _nstr.size();
    
    if(_num_ly>0){
      _nl->value(_nstr.size());
      _ly_1->value(_nstr[0]);
    }
    if(_num_ly>1) _ly_2->value(_nstr[1]);
    if(_num_ly>2) _ly_3->value(_nstr[2]);
    
    
    chk_layers();
}

void fl_anna_set::chk_layers(void) {
  //
    if((int)_nl->value()>0){
      _ly_1->activate();
      _ly_2->deactivate();
      _ly_3->deactivate();
      choice_activation_function_1->activate();
      choice_activation_function_2->deactivate();
      choice_activation_function_3->deactivate();
    }if((int)_nl->value()>1){
      _ly_1->activate();
      _ly_2->activate();
      _ly_3->deactivate();
      choice_activation_function_1->activate();
      choice_activation_function_2->activate();
      choice_activation_function_3->deactivate();
    }  if((int)_nl->value()>2){
      _ly_1->activate();
      _ly_2->activate();
      _ly_3->activate();
      choice_activation_function_1->activate();
      choice_activation_function_2->activate();
      choice_activation_function_3->activate();
    }
}

TVector<unsigned int>& fl_anna_set::structure(void) {
  //
    return _nstr;
}

TVector<unsigned int>& fl_anna_set::functions(void) {
  //
    return _n_actf;
}

void fl_anna_set::hide() {
  track->hide();
}

int fl_anna_set::visible() {
  return track->visible();
}
